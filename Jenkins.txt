Jenkins
===========
This is a tool used for implementing CI-CD

Stage in CI-CD
====================
Stage 1 (Continuous Download)
------------------------------------
Whenever developers upload some code into the Git repository
Jenkins  will receive a notification and it will download 
all that code.This is called as Continuous Download

Stage 2 (Continuous Build)
-----------------------------------
The code downloaded in the previosu stage had to converted
into a setup file commonly known ar aritfact.To create this 
artifact jenkins uses certain build tools like ANT,Maven etc
The artifact can be inthe format of a .jar,.war..ear file etc
This stage is called as Continuous Build

Stage 3 (Continuous Deployment)
-----------------------------------
The artifact created in the previous stage has to be deployed into
the QAServers where a team of testers can start accessing it.
This QA environment can be running on some application servers like
tomcat,Weblogic etc.Jenkins deploys the artifact into these application
servers and this is called Continuous Deployment

Stage 4 (Continuous Testing)
-----------------------------------
Testers create automation test scripts using tools like selenium,UFT etc
JEnkins run these automation test scripts and checks if the application
is working according to clients requitrement or not,If testing fails
JEnkins will send automated email notifications to the corresponding
team members and developers will finx the defects and upload the modifed 
code into Git,Jenkins will again start from stage 1

Stage 5 (Continuous Delivery)
-----------------------------------
Once the application is found to be defect free Jenkins will deploy it
into the Prod servers where the end user or clinet can start accessing it
This is called continuous delivery

Here the first 4 stages represent CI (Continuous Integration)
the laste stage represents CD (Continuous Delivery)

========================================================================
Day 2
========================================================================
===========================================================
Setup of servers for CI-CD
=====================================
1 Create 3 AWS ubuntu instances
  and name them Jenkinsserver,QAServer,ProdServer

Installing Jenkins
==========================
1 Connect to JEnkins server using Git bash

2 Update the apt repoistory
  sudo apt-get update

3 Install jdk
  sudo apt-get install -y openjdk-8-jdk

4 Install git and maven
  sudo apt-get install -y git maven

5 Download jenkins.war
  wget https://get.jenkins.io/war-stable/2.263.4/jenkins.war

6 To start jenkins
  java -jar jenkins.war

7 To access jenkins from browser
  public_ip_of_jenkinsserver:8080

8 Unlock jenkins by entering the first admin password

9 Click on Install suggested plugins

10 Create first admin user

11 Click on Continue--->Finish

==============================================================
Setting up tomcat on QA and ProdServer
==============================================================
1 Connect to QAServer AWS instance using git bash

2 Update the apt repository
  sudo apt-get update

3 Install tomcat9
  sudo apt-get install -y tomcat9

4 Install tomcat9-admin
  sudo apt-get install -y tomcat9-admin

5 Edit the tomcat-users.xml file
  sudo vim /etc/tomcat9/tomcat-users.xml
  Delete the entire content of the file and copy paste the below content
 
  <tomcat-users>
       <user username="deepika" password="deepika" roles="manager-script"/>
  </tomcat-users>


6 Restart tomcat
  sudo service tomcat9 restart

Repeat the above 6 steps on the Prodserver AWS instance

==============================================================================
Day 3
==============================================================================
===============================================================================
Stage 1 (Continuous Download)
====================================
1 Open the dashboard of Jenkins
2 Click on New item---->enter item name as "Development"
3 Select Free style project---->OK
4 Go to Source code management
5 Select Git
8 Enter github url where developers have uploaded the code
  https://github.com/intelliqittrainings/maven.git
9 Click on Apply--->Save
10 Go to the dashboard of Jenkins
11 Click on Build icon
   This job will download all the code from github repository
   into the Jenkinsserver AWS instance

----------------------------------------------------------------------
Stage 2 (Continuous Build)
================================
1 Open the dashboard of Jenkins
2 Go to the Development job--->Click on Configure
3 Go to Build section
4 Click on "Add build step"
5 Click on "Invoke top level maven target"
6 Enter Goal as: package
7 Apply--->Save
8 Go to the dashboard of Jenkins
9 Go to the Development job and click on Build icon
  This job will conver the code into an artifact and this artifact
  comes in the format of a war file


==========================================================================
Stage 3 (Continuous Deployment)
====================================
1 Open the dashboard of Jenkins
2 Click on Manage Jenkins
3 Click on Manage Plugins
4 Go to Available section
5 Search for "Deploy to container" plugin
6 Click on Install without restart
7 Go to the dashoard of jenkins
8 Go to the Development job
9 Click on Configure
10 Go to Posy build actions
11 Click on Add post build action
12 Click on Deploy war/ear to containers
   war/ear file: **\*.war
   Context path: testapp
   Click on Add contianer
   Select tomcat9
   Enter tomcat credentials
   Tomcat url: private_ip_qaserver:8080
13 Apply--->Save
14 Go to the dashboard of jenkins
15 Go to the development job---->Click on build
   This job will deploy the artifact into the QAServers
   and to access the application from the level of browser
   public_ip_qaserver:8080/testapp


===============================================================
Day 4
==================================================================
Stage 4 (Continuous Testing)
=====================================
1 Open the dashboard of Jenkins
2 Click on New item--->Enter some item name(Testing)
3 Go to Source Code management---->Select Git
4 Enter the github url where testers have uplaoded the selenium code
  https://github.com/intelliqittrainings/FunctionalTesting.git
5 Go to Build section
6 Click on Add build step
7 Click on Execute shell
  java -jar path_of_testing.jar
8 Click on Apply--->Save
9 Go to the dashboard of Jenkins
10 Go to the Testing job--->Click on Build icon
   This job will download all the selenium  test scripts and execute them

=========================================================================
Linking the Development job with the Testing job
===================================================
1 Open the dashboard of Jenkins
2 Go to the Development job--->Click on Configure
3 Go to Post build actions
4 Click on Add Post Build action
5 Click on Build other projects
6 Enter project name as Testing
7 Click on Save
  Now if we run the Development job it will finish the first 3 stages of CI
  and then call the Testing job
===========================================================================

Copy artifacts from Development job to Testing job
===========================================================
1 Open the dashboard of Jenkins
2 Click on Manage Jenkins
3 Click on Manage Plugins
4 Go to Available section
5 Search for Copy artifact plugin
6 Click on Install without restart
7 Go to the dashboard of Jenkins
8 Go to Development job--->Click on configure
9 Go to Post build actions--->Click on Add post build actions
10 Click on Archive the artifacts
11 Enter files to be archived as **/*.war
12 Apply--->Save
13 Go to dashboard of Jenkins
14 Go to Testing job--->Configure
15 Go to Build section--->Click on Add build step
16 Click on Copy artifacts from other projects
17 Enter project name as "Development"
18 Apply--->Save


Stage 5 (Continuous Delivery)
=================================
1 Go to the dashboard of Jenkins
2 Go to the Testing job--->Configure
3 Go to Post build actions
4 Click on add post build actions
5 Click on Deploy war/ear to container
  war/ear file: **/*war
  context path: prodapp
  Click on Add container---->Select tomcat9
  Enter username and password of tomcat9
  Tomcat url: private_ip_prodserver:8080
6 Apply--->Save
===========================================================================

User Administration in Jenkins
===========================================

Creating users in Jenkins
===========================
1 Open the dashboard of jenkins
2 click on manage jenkins
3 click on manage users
4 click on create users
5 enter user credentials

Creating roles and assgning
==============================
1 Open the dashboard of jenkins
2 click on manage jenkins
3 click on manage plugins
4 click on role based authorization strategy plugin
5 install it
6 go to dashboard-->manage jenkins
7 click on configure global security
8 check enable security checkbox
9 go to authorization section-->click on role based strategy  radio button
10 apply-->save
11 go to dashboard of jenkins
12 click on manage jenkins
13 click on manage and assign roles
14 click on mange roles
15 go to global roles and create a role "employee"
16 for this employee in overall give read access
   and in view section give all access
17 go to project roles-->Give the role as developer
   and patter as Dev.* (ie developer role can access
   only those jobs whose name start with Dev)
18 similarly create another role as tester and assign the pattern as "Test.*"
19 give all permissions to developrs and tester
20 apply--save
21 click on assign roles
22 go to global roles and add user1 and user2 
23 check user1 and user2 as employees
24 go to item roles
25 add user1 and user2
26 check user1 as developer and user2 as tester
27 apply-->save
If we login into jenkins as user1 we can access only the development 
related jobs and user2 can access only the testing related jobs

=============================================================================
===========================================================================
Alternate ways of setup of Jenkins
=======================================
1 Update the apt repository
  sudo apt-get update

2 Install jdk:1.8
  sudo apt-get install -y openjdk-8-jdk

3 Added the jenkins keys to the apt key repository
  curl -fsSL https://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo tee \
  /usr/share/keyrings/jenkins-keyring.asc > /dev/null

4 Add the debain package repository to the jenkins.list file
  echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
  https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
  /etc/apt/sources.list.d/jenkins.list > /dev/null

5 Update the apt repository
  sudo apt-get update

6 Install jenkins
  sudo apt-get install -y jenkins

==============================================================================
Day 6
===============================================================================
===========================================================================
MAster Slave Architecture of Jenkins
============================================
This is used distribute the work load to additional linux
servers called as slaves.This is used when we want to run multiple 
jobs on jenkins parallelly.

Setup
============
1 Create a new AWS ubuntu20 instance

2 Install the same version of java as present in the master
  sudo apt-get update
  sudo apt-get install -y openjdk-8-jdk

3 Setup passwordless SSH betwen Master and slave
  a) Connect to slave and set password to default user
     sudo passwd ubuntu
  b) Edit the ssh config file
     sudo vim /etc/ssh/sshd_config
     Search for "PasswordAuthentication" and change it from no to yes
  c) Restart ssh
     sudo service ssh restart
  d) Connect to Master using git bash
  e) Generate the ssh keys
     ssh-keygen
  f) Copy the ssh keys
     ssh-copy-id ubuntu@private_ip_of_slave
     This will copy the content of the public keys to a file called
     "authorised_keys" on the slave machine


  Connect to slave using git bash
4 Downlaod the slave.jar file
  wget http://private_ip_of_jenkinsserver:8080/jnlpJars/slave.jar

5 Give execute permissions to the slave.jar
  chmod u+x slave.jar

6 Create an empty folder that will be the workspace of jenkins
  mkdir workspace

7 Open the dashboard of Jenkins
  
8 Click on Manage Jenkins--->Click on Manage Nodes and Clouds

9 Click on New node---->Enter some node name as Slave1

10 Select Permanant Agent--->OK

12 Enter remote root directory as /home/ubuntu/workspace

13 Labels: myslave (This label is associated with a job in jenkins
   and then that job will run on that slave)

14 Go to Launch Method and select "Launch agent via execution of command on master"

15 Click on Save

16 Go to the dashboard of Jenkins

17 Go to the job that we want to run on slave---->Click on Configure

18 Go to General section

19 Check restrict where this project can be run

20 Enter slave label as myslave

========================================================================
Day 7
=========================================================================
Pipeline as Code
=====================
This is the process of implementing all the stages of CI-CD
from the level of a Groovy script file called as the Jenkinsfile

Advantages
================
1 Since this is a code it can be uploaded into git and all the
team members can review and edit the code and still git will 
maintain multiple versions and we can decide what version to use

2 Jenkinsfiles can withstand planned and unplanned restart of the 
Jenkins master

3 They can perform all stages of ci-cd with minimum no of plugins
so they are more faster and secure

4 We can hanlde real world challanges like if conditions,loops
  exception handling etc.ie if a stage in ci-cd passes we want 
to execute some steps and it fails we want to execute some other
steps

=======================================================================
Pipeline as code can be implemented in 2 ways
1 Scripted Pipeline
2 Declarative Pipeline

Syntax of Scripted Pipeline
================================
node('built-in')
{
   stage('Stage name in ci-cd')
   {
     Groovy code to implement this stage
   }
}

Syntax of Declarative Pipeline
===================================
pipeline
{
  agent any
  stages
  {
    stage('Stage name in CI-CD')
    {
      steps
      {
         Groovy code to implement this stage
      }
    }
}
=================================================================================
Scripted Pipeline
========================
1 Go to the dashboard of jenkins
2 Click on New item
3 Enter item name as "ScriptedPipeline"
4 Select Pipeline--->Click on OK


node('built-in')
{
    stage('ContinuousDownload')
    {
        git 'https://github.com/intelliqittrainings/maven.git'
    }
    stage('ContinuousBuild')
    {
        sh 'mvn package'
    }
    stage('ContinuousDeployment')
    {
       deploy adapters: [tomcat9(credentialsId: '8cc7d40a-bab0-438d-8dc2-f0d886815228', path: '', url: 'http://172.31.16.84:8080')], contextPath: 'testapp', war: '**/*.war'
    }
    stage('ContinuousTesting')
    {
        git 'https://github.com/intelliqittrainings/FunctionalTesting.git'
        sh 'java -jar /home/ubuntu/.jenkins/workspace/ScriptedPipeline/testing.jar'
    }
    stage('ContinuousDelivery')
    {
        input message: 'Need approvals from the DM!', submitter: 'srinivas'
        deploy adapters: [tomcat9(credentialsId: '8cc7d40a-bab0-438d-8dc2-f0d886815228', path: '', url: 'http://172.31.29.58:8080')], contextPath: 'prodapp', war: '**/*.war'
    }
    
    
    
    
    
}
===========================================================================
Day 8
===========================================================================


pipeline
{
    agent any
    stages
    {
        stage('ContinuousDownload')
        {
            steps
            {
                git 'https://github.com/intelliqittrainings/maven.git'
            }
        }
        stage('ContinuousBuild')
        {
            steps
            {
                sh 'mvn package'
            }
        }
        stage('ContinuousDeployment')
        {
            steps
            {
                deploy adapters: [tomcat9(credentialsId: '8cc7d40a-bab0-438d-8dc2-f0d886815228', path: '', url: 'http://172.31.16.84:8080')], contextPath: 'test1', war: '**/*.war'
            }
        }
        stage('ContinuousTesting')
        {
            steps
            {
                git 'https://github.com/intelliqittrainings/FunctionalTesting.git'
                sh 'java -jar /home/ubuntu/.jenkins/workspace/DeclarativePipeline/testing.jar'
            }
        }
        stage('ContinuosuDelivery')
        {
            steps
            {
              input message: 'Waiting for Approval from the DM!', submitter: 'srinivas'
              deploy adapters: [tomcat9(credentialsId: '8cc7d40a-bab0-438d-8dc2-f0d886815228', path: '', url: 'http://172.31.29.58:8080')], contextPath: 'prod1', war: '**/*.war'  
            }
        }
        
        
        
    }
}

===========================================================================
Declarative pipeline using scp for deployments
==================================================
pipeline
{
    agent any
    stages
    {
        stage('ContinuousDownload')
        {
            steps
            {
                git 'https://github.com/intelliqittrainings/maven.git'
            }
        }
        stage('ContinuousBuild')
        {
            steps
            {
                sh 'mvn package'
            }
        }
        stage('ContinuousDeployment')
        {
            steps
            {
                sh 'scp /home/ubuntu/.jenkins/workspace/DeclarativePipeline/webapp/target/webapp.war ubuntu@172.31.16.84:/var/lib/tomcat9/webapps/testapp.war'
            }
        }
        stage('ContinuousTesting')
        {
            steps
            {
                git 'https://github.com/intelliqittrainings/FunctionalTesting.git'
                sh 'java -jar /home/ubuntu/.jenkins/workspace/DeclarativePipeline/testing.jar'
            }
        }
        stage('ContinuosuDelivery')
        {
            steps
            {
              input message: 'Waiting for Approval from the DM!', submitter: 'srinivas'
              
sh 'scp /home/ubuntu/.jenkins/workspace/DeclarativePipeline/webapp/target/webapp.war ubuntu@172.31.29.58:/var/lib/tomcat9/webapps/prodapp.war'
            }
        }
        
        
        
    }
}

Scheduling the job for a particular date and time
==================================================================

1 Open the dashboard of jenkins
2 Go to the configuration page of the job
3 Go to Build triggers
4 Click on Build periodically
5 Schedule the date and time
6 Click on Save
===============================================================================
Day 9
==============================================================================
Declarative Pipeline with Post Condtions
=============================================

pipeline
{
    agent any
    stages
    {
        stage('ContinuousDownload')
        {
            steps
            {
                git 'https://github.com/krishnain/maven112.git'
            }
        }
        stage('ContinuousBuild')
        {
            steps
            {
                sh 'mvn package'
            }
        }
        stage('ContinuousDeployment')
        {
            steps
            {
                sh 'scp /home/ubuntu/.jenkins/workspace/DeclarativePipeline/webapp/target/webapp.war ubuntu@172.31.16.84:/var/lib/tomcat9/webapps/testapp.war'
            }
        }
        stage('ContinuousTesting')
        {
            steps
            {
                git 'https://github.com/intelliqittrainings/FunctionalTesting.git'
                sh 'java -jar /home/ubuntu/.jenkins/workspace/DeclarativePipeline/testing.jar'
            }
        }
    }
    post
    {
        success
        {
            sh 'scp /home/ubuntu/.jenkins/workspace/DeclarativePipeline/webapp/target/webapp.war ubuntu@172.31.29.58:/var/lib/tomcat9/webapps/prodapp.war'
        }
        failure
        {
            mail bcc: '', body: 'Jenkins has show a failure status in CI', cc: '', from: '', replyTo: '', subject: 'CI Failed', to: 'selenium.saikrishna@gmail.com'
        }
    }
        
        
        
        
    
}

====================================================================
Declarative Pipeline with try catch
=======================================
pipeline
{
    agent any
    stages
    {
        stage('ContinuousDownload')
        {
            steps
            {
                script
                {
                    try
                    {
                        git 'https://github.com/krishnain/mavenww112.git'
                    }
                    catch(Exception e1)
                    {
                        mail bcc: '', body: 'Jenkins is unable to download dev code from remote github', cc: '', from: '', replyTo: '', subject: 'Download Failed', to: 'selenium.saikrishna@gmail.com'
                        exit(1)
                    }
                }
                
            }
        }
        stage('ContinuousBuild')
        {
            steps
            {
                script
                {
                    try
                    {
                        sh 'mvn package'
                    }
                    catch(Exception e2)
                    {
                        mail bcc: '', body: 'Jenkins is unable to create an artifact from the downloaded code', cc: '', from: '', replyTo: '', subject: 'Build Failed', to: 'dev.team@gmail.com'
                        exit(1)
                    }
                }
                
            }
        }
        stage('ContinuousDeployment')
        {
            steps
            {
                script
                {
                    try
                    {
                        sh 'scp /home/ubuntu/.jenkins/workspace/DeclarativePipeline/webapp/target/webapp.war ubuntu@172.31.16.84:/var/lib/tomcat9/webapps/testapp.war'
                    }
                    catch(Exception e3)
                    {
                        mail bcc: '', body: 'Jenkins is unable to deploy into tomcat on the QAservers', cc: '', from: '', replyTo: '', subject: 'Deployment Failed', to: 'middleware.team@gmail.com'
                        exit(1)
                    }
                }
                
            }
        }
        stage('ContinuousTesting')
        {
            steps
            {
                script
                {
                    try
                    {
                        git 'https://github.com/intelliqittrainings/FunctionalTesting.git'
                sh 'java -jar /home/ubuntu/.jenkins/workspace/DeclarativePipeline/testing.jar'
                    }
                    catch(Exception e4)
                    {
                        mail bcc: '', body: 'Selenium scripts are giving a failure status', cc: '', from: '', replyTo: '', subject: 'Testing Failed', to: 'qa.team@gmail.com'
                        exit(1)
                    }
                }
                
            }
        }
        stage('ContinuosuDelivery')
        {
            steps
            {
              script
              {
                  try
                  {
                      sh 'scp /home/ubuntu/.jenkins/workspace/DeclarativePipeline/webapp/target/webapp.war ubuntu@172.31.29.58:/var/lib/tomcat9/webapps/prodapp.war'
                  }
                  catch(Exception e5)
                  {
                      mail bcc: '', body: 'Jenkins is unable to deploy into tomcat on prodservers', cc: '', from: '', replyTo: '', subject: 'Delivery Failed', to: 'delivery.team@gmail.com'
                  }
                  
              }
              

            }
        }
        
        
        
    }
}
=================================================================================
Scripted Pipeline with Try catch
==================================
node('built-in')
{
    
        stage('ContinuousDownload')
        {
            
            try
            {
                git 'https://github.com/krishnain/maven112.git'
            }
            catch(Exception e1)
            {
                mail bcc: '', body: 'Jenkins is unable to download dev code from remote github', cc: '', from: '', replyTo: '', subject: 'Download Failed', to: 'selenium.saikrishna@gmail.com'
                exit(1)
            }
        }
                
       
        stage('ContinuousBuild')
        {
            
            try
            {        
			    sh 'mvn package'
            }
            catch(Exception e2)
            {
                mail bcc: '', body: 'Jenkins is unable to create an artifact from the downloaded code', cc: '', from: '', replyTo: '', subject: 'Build Failed', to: 'dev.team@gmail.com'
                 exit(1)
            }
        }
                
        
        stage('ContinuousDeployment')
        {
            
            try
            {
                sh 'scp /home/ubuntu/.jenkins/workspace/DeclarativePipeline/webapp/target/webapp.war ubuntu@172.31.16.84:/var/lib/tomcat9/webapps/testapp.war'
            }
            catch(Exception e3)
            {
                mail bcc: '', body: 'Jenkins is unable to deploy into tomcat on the QAservers', cc: '', from: '', replyTo: '', subject: 'Deployment Failed', to: 'middleware.team@gmail.com'
                exit(1)
            }
        }
                
       
        stage('ContinuousTesting')
        {
            try
            {
                git 'https://github.com/intelliqittrainings/FunctionalTesting.git'
                sh 'java -jar /home/ubuntu/.jenkins/workspace/DeclarativePipeline/testing.jar'
            }
            catch(Exception e4)
            {
                mail bcc: '', body: 'Selenium scripts are giving a failure status', cc: '', from: '', replyTo: '', subject: 'Testing Failed', to: 'qa.team@gmail.com'
                exit(1)
            }
        }
                
            
        stage('ContinuosuDelivery')
        {
            try
            {
                sh 'scp /home/ubuntu/.jenkins/workspace/DeclarativePipeline/webapp/target/webapp.war ubuntu@172.31.29.58:/var/lib/tomcat9/webapps/prodapp.war'
            }
            catch(Exception e5)
            {
                mail bcc: '', body: 'Jenkins is unable to deploy into tomcat on prodservers', cc: '', from: '', replyTo: '', subject: 'Delivery Failed', to: 'delivery.team@gmail.com'
            }
                  
        }
              

          
        
        
        
    
}

================================================================================
Shared Libraries
============================
1 Create a remote github repo

2 Create a vars folder in it and create a file  cicd.groovy with the below code

def newGit(repo)
{
  git "${repo}" 
}
def newMaven()
{
   sh 'mvn package'
}
def newDeploy(ip,appname)
{
  sh "scp /home/ubuntu/.jenkins/workspace/DeclarativePipeline/webapp/target/webapp.war ubuntu@${ip}:/var/lib/tomcat9/webapps/${appname}.war"
}
def runSelenium(path)
{
  sh "java -jar ${path}/testing.jar"
}
def newApprovals(name)
{
  input message: 'Waiting for approvals!', submitter: "${name}" 
}

==========================================================================

@Library('libraries')_

pipeline
{
    agent any
    stages
    {
        stage('ContinuousDownload')
        {
            steps
            {
                script
                {
                    cicd.newGit("https://github.com/krishnain/maven.git")
                }
            }
        }
        stage('ContinuousBuild')
        {
            steps
            {
                script
                {
                    cicd.newMaven()
                }
            }
        }
        stage('ContinuousDeploy')
        {
            steps
            {
                script
                {
                    cicd.newApprovals("hari")
                    cicd.newDeploy("172.31.81.5","testapp")
                }
            }
        }
        stage('ContinuousTesting')
        {
            steps
            {
                script
                {
                    cicd.newGit("https://github.com/intelliqittrainings/FunctionalTesting.git")
                    cicd.runSelenium("/home/ubuntu/.jenkins/workspace/DeclarativePipeline")
                }
            }
        }
        stage('ContinuousDelivery')
        {
            steps
            {
                script
                {
                    cicd.newApprovals("srinivas")
                   cicd.newDeploy("172.31.80.42","prodapp")   
                }
            }
        }
        
        
    }
}

====================================================================================

